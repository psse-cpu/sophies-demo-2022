# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_and_qa:
    runs-on: ubuntu-latest
    container: node:lts
    env:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/sophies_demo
      # note there's no dev DB server here, so no -test suffix, but we'll leave
      # the above env var just in case some production code references it in tests
      TEST_DATABASE_URL: postgres://postgres:postgres@postgres:5432/sophies_demo
      GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
      GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
      GOOGLE_OAUTH_REDIRECT_URL: http://localhost:3000/auth/google/redirect

      # DON'T USE THE PROD SECRET HERE, OR YOU WILL BE ðŸ”¥D!
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRES_IN: 1w

      FRONTEND_STAGING_DEPLOY_HOOK_URL: ${{ secrets.FRONTEND_STAGING_DEPLOY_HOOK_URL }}
      BACKEND_STAGING_DEPLOY_HOOK_URL: ${{ secrets.BACKEND_STAGING_DEPLOY_HOOK_URL }}

      FRONTEND_ORIGIN: http://localhost:9000
      VITE_BACKEND_ORIGIN: http://localhost:3000
      ON_GITHUB_ACTIONS: 1

    services:
      postgres:
        image: postgres:13.6
        env:
          POSTGRES_DB: sophies_demo
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - name: Checkout Git repo
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Setup PNPM
        uses: pnpm/action-setup@v2.1.0
        with:
          version: 7.1.7
          run_install: true

      - name: Typecheck and Build Backend
        # frontend build is handled during E2E tests, since `quasar dev` does not
        # work with start-server-and-test
        run: pnpm be build

      - name: Regenerate Frontend GraphQL Types
        run: pnpm fe codegen

      - name: Lint
        run: pnpm lint

      - name: Unit and Integration Tests
        run: pnpm test

      # My educated guess: Node/Nest.js and Codegen does not run as root:root
      - name: Fix File Permissions
        # don't do this on the prod server, CI is okay
        run: chmod -Rv a+w frontend

      - name: Install Cypress Dependencies
        run: >
          apt-get update -y &&
          apt-get install -y libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev 
          libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - name: Build Frontend and Run E2E Test
        run: pnpm serve-and-test:e2e

      - name: Check Badges Accuracy
        run: pnpm badges:ci

      - name: Deploy to Staging (render.com)
        run: >
          echo "CI passed: Automatically deploying frontend and backend to staging..." &&
          curl -X GET "$FRONTEND_STAGING_DEPLOY_HOOK_URL" &&
          curl -X GET "$BACKEND_STAGING_DEPLOY_HOOK_URL"
